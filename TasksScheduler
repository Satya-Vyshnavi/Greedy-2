T.c --> O(n), S.c --> O(n)
class Solution {
    public int leastInterval(char[] tasks, int n) {
        HashMap<Character,Integer> map = new HashMap<>();
        int maxcount= 0;
        int maxfreq= 0;
        for(int i = 0; i<tasks.length; i++){
            if(map.containsKey(tasks[i])){
                maxcount = Math.max(maxcount,map.get(tasks[i])+1);
            }
            map.put(tasks[i],map.getOrDefault(tasks[i],0)+1);
        }
        for(int val : map.values()) {
           if(val == maxcount){
            maxfreq++;
           }
        }
        
        int partitioncount = maxcount -1;
        int emptyslots = (n-(maxfreq-1))*partitioncount;
        int availableslots = tasks.length - (maxcount*maxfreq);
        int idle = Math.max(0,emptyslots-availableslots);
        return tasks.length+idle;
    }
}